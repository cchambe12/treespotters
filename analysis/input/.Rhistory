write.csv(dx, file="/n/wolkovich_lab/Lab/Cat/fs_space_orig.csv", row.names=FALSE)
#write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_dvr.csv", row.names=FALSE)
write.csv(prep_space, file="/n/wolkovich_lab/Lab/Cat/fs_space_orig.csv", row.names=FALSE)
write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", row.names=FALSE)
range(prep_space$eigen)
bb<-read.csv("~/Documents/git/regionalrisk/fs_space_dvr.csv", header=TRUE)
#bb<-read.csv("~/Documents/git/regionalrisk/fs_space_dvr.csv", header=TRUE)
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
dselect<-read.csv("~/Documents/git/regionalrisk/memselect_dvr.csv", header=TRUE)
dselect<-read.csv("~/Documents/git/regionalrisk/analyses/scripts/memselect_dvr.csv", header=TRUE)
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_dvr_allpred.csv", header=TRUE)
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$lat.long<-paste(bb$lat, bb$long)
bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
bbs<-bb[!duplicated(bb$lat.long),]
#dselect<-read.csv("~/Documents/git/regionalrisk/analyses/scripts/memselect_dvr.csv", header=TRUE)
#deselect<-bb
dx<-cbind(bbs, dselect)
library(dplyr)
rex<-dx%>%dplyr::select(-lat.long, -lat, -long, -species, -lat.long, -distance, -year, -fs.count, -nao, -cc, -fs)
rex.mod<-lm(Y~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig, by="lat.long")
write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_dvr.csv", row.names=FALSE)
range(prep_space$eigen)
bb<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_orig_allpred.csv", header=TRUE)
foo<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_dvr.csv", header=TRUE)
x<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", header=TRUE)
write.csv(dselect, file="/n/wolkovich_lab/Lab/Cat/memselect_orig.csv", row.names=FALSE)
dselect<-read.csv("~/Documents/git/regionalrisk/analyses/scripts/memselect_orig.csv", header=TRUE)
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$lat.long<-paste(bb$lat, bb$long)
bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
bbs<-bb[!duplicated(bb$lat.long),]
#dselect<-read.csv("~/Documents/git/regionalrisk/analyses/scripts/memselect_orig.csv", header=TRUE)
#deselect<-bb
dx<-cbind(bbs, dselect)
library(dplyr)
rex<-dx%>%dplyr::select(-lat.long, -lat, -long, -species, -lat.long, -distance, -year, -fs.count, -nao, -cc, -fs)
rex.mod<-lm(Y~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig, by="lat.long")
range(prep_space$eigen)
range(x$eigen)
write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", row.names=FALSE)
x<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_orig_allpred.csv", header=TRUE)
bb<-x
#bb<-x
#bb$fs<-ifelse(bb$fs.count>0, 1, 0)
#bb$lat.long<-paste(bb$lat, bb$long)
#bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
#bbs<-bb%>%dplyr::select(lat.long, Y, elev, distkm, lat, long, fs.count)
#bbs$fs.count<-ave(bb$fs, bb$lat.long)
bbs<-bb[!duplicated(bb$lat.long),]
dselect<-read.csv("~/Documents/git/regionalrisk/analyses/scripts/memselect_orig.csv", header=TRUE)
dx<-cbind(bbs, dselect)
colnames(dx)
#eigen<-rowMeans(dx[,13:493])
dx$eigen<-dx[,13]
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, dx)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig)
bb<-prep_space
library(dplyr)
prep_space<-full_join(bb, beig)
bb<-prep_space
#bb$eigen<-rowMeans(bb[,20:24])
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
#bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
bb$space2.z <-(bb$eigen2-mean(bb$eigen2,na.rm=TRUE))/(2*sd(bb$eigen2,na.rm=TRUE))
norm.first<-glm(fs~ nao.z + mat.z + dist.z + elev.z + space.z +
cc.z + species + nao.z:species +
mat.z:species + dist.z:species + elev.z:species + space.z:species +
cc.z:species +
nao.z:cc.z + mat.z:cc.z + dist.z:cc.z + elev.z:cc.z + space.z:cc.z,
data=bb, family=binomial())
summary(norm.first)
noncenspace.first<-glm(fs~ nao.z + mat.z + dist.z + elev.z + eigen +
cc.z + species + nao.z:species +
mat.z:species + dist.z:species + elev.z:species + cc.z:species + eigen:species +
nao.z:cc.z + mat.z:cc.z + dist.z:cc.z + elev.z:cc.z + eigen:cc.z,
data=bb, family=binomial())
summary(noncenspace.first)
write.csv(prep_space, file="~/Documents/git/regionalrisk/analyses/output/fs_space_orig.csv", row.names=FALSE)
x<-read.csv("~/Documents/git/regionalrisk/analyses/output/fs_allspp_dvr_allpred.csv", header=TRUE)
bb<-x
#bb<-x
#bb$fs<-ifelse(bb$fs.count>0, 1, 0)
#bb$lat.long<-paste(bb$lat, bb$long)
#bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
#bbs<-bb%>%dplyr::select(lat.long, Y, elev, distkm, lat, long, fs.count)
#bbs$fs.count<-ave(bb$fs, bb$lat.long)
bbs<-bb[!duplicated(bb$lat.long),]
dselect<-read.csv("~/Documents/git/regionalrisk/memselect_dvr.csv", header=TRUE)
dx<-cbind(bbs, dselect)
rex<-dx%>%dplyr::select(-lat.long, -distance, -lat, -long, -cc, -species, -nao, -mst, -year)
#test<-full_join(bbs, MEM.select)
#test<-test%>%dplyr::select(-species, -lat.long, -distance)
rex.mod<-lm(fs.count~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, dx)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig)
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig)
bb<-prep_space
#bb$eigen<-rowMeans(bb[,20:24])
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
#bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
bb$space2.z <-(bb$eigen2-mean(bb$eigen2,na.rm=TRUE))/(2*sd(bb$eigen2,na.rm=TRUE))
norm.first<-glm(fs~ nao.z + mat.z + dist.z + elev.z + space.z +
cc.z + species + nao.z:species +
mat.z:species + dist.z:species + elev.z:species + space.z:species +
cc.z:species +
nao.z:cc.z + mat.z:cc.z + dist.z:cc.z + elev.z:cc.z + space.z:cc.z,
data=bb, family=binomial())
summary(norm.first)
bb<-x
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
#bb<-x
#bb$fs<-ifelse(bb$fs.count>0, 1, 0)
#bb$lat.long<-paste(bb$lat, bb$long)
#bb$Y<-ave(bb$fs, bb$lat.long, FUN=sum)
#bbs<-bb%>%dplyr::select(lat.long, Y, elev, distkm, lat, long, fs.count)
#bbs$fs.count<-ave(bb$fs, bb$lat.long)
bbs<-bb[!duplicated(bb$lat.long),]
dx<-cbind(bbs, dselect)
rex<-dx%>%dplyr::select(-lat.long, -distance, -lat, -long, -cc, -species, -nao, -mst, -year)
#test<-full_join(bbs, MEM.select)
#test<-test%>%dplyr::select(-species, -lat.long, -distance)
rex.mod<-lm(fs.count~ ., data=rex)
space<-residuals(rex.mod)
eigen<-space
#bb<-bb%>%dplyr::select(-eigen)
b_space<-cbind(bbs, eigen)
beig<-subset(b_space, select=c("lat.long", "eigen"))
prep_space<-full_join(bb, beig)
bb<-prep_space
#bb$eigen<-rowMeans(bb[,20:24])
bb<-subset(bb, select=c("species", "lat", "elev", "year", "mst", "cc", "fs.count", "nao",
"distkm", "eigen"))
bb$fs<-ifelse(bb$fs.count>0, 1, 0)
bb$nao.z <- (bb$nao-mean(bb$nao,na.rm=TRUE))/(2*sd(bb$nao,na.rm=TRUE))
bb$mat.z <- (bb$mst-mean(bb$mst,na.rm=TRUE))/(2*sd(bb$mst,na.rm=TRUE))
bb$cc.z <- (bb$cc-mean(bb$cc,na.rm=TRUE))/(2*sd(bb$cc,na.rm=TRUE))
bb$elev.z <- (bb$elev-mean(bb$elev,na.rm=TRUE))/(2*sd(bb$elev,na.rm=TRUE))
#bb$lat.z <- (bb$lat-mean(bb$lat,na.rm=TRUE))/(2*sd(bb$lat,na.rm=TRUE))
bb$dist.z <-(bb$distkm-mean(bb$distkm,na.rm=TRUE))/(2*sd(bb$distkm,na.rm=TRUE))
bb$space.z <-(bb$eigen-mean(bb$eigen,na.rm=TRUE))/(2*sd(bb$eigen,na.rm=TRUE))
norm.first<-glm(fs~ nao.z + mat.z + dist.z + elev.z + space.z +
cc.z + species + nao.z:species +
mat.z:species + dist.z:species + elev.z:species + space.z:species +
cc.z:species +
nao.z:cc.z + mat.z:cc.z + dist.z:cc.z + elev.z:cc.z + space.z:cc.z,
data=bb, family=binomial())
summary(norm.first)
load("~/Documents/git/regionalrisk/orig_short.Rdata")
orig.short
load("~/Documents/git/orig_full.Rdata")
orig.full
make_output(output_location = "~/Documents/git/cameratrap", # the output csv will be stored on my dekstop
output_name = "zamba_results.csv", # the name of the csv I want to create with my output
model_dir = "~/Documents/git/cameratrap", # the location where I stored the L1 folder
saved_predictions = "output_class_names.txt" # the same name that I used for save_predictions in the classify function (if I didn't use default, I would need to change this).
)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
#library(devtools)
#devtools::install_github("mikeyEcology/MLWIC")
library(reticulate)
library(tensorflow)
library(MLWIC)
setup(python_loc = "/Users/CatherineChamberlain/anaconda3/bin/python")
make_output(output_location = "~/Documents/git/cameratrap", # the output csv will be stored on my dekstop
output_name = "zamba_results.csv", # the name of the csv I want to create with my output
model_dir = "~/Documents/git/cameratrap", # the location where I stored the L1 folder
saved_predictions = "output_class_names.txt" # the same name that I used for save_predictions in the classify function (if I didn't use default, I would need to change this).
)
load("/Users/CatherineChamberlain/Documents/git/regionalrisk/orig_short.Rdata")
View(orig.short)
orig.short
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(egg)
# Set Working Directory
setwd("~/Documents/git/treespotters/analysis/input")
b<-read.csv("individual_phenometrics_data.csv",header=TRUE)
### Cheap cleaning method to remove probable errors...
#d<-b[(b$First_Yes_DOY>=60),]
#d[] <- lapply(d, gsub, pattern="'", replacement="")
#d<-d[!(d$ObservedBy_Person_ID=='26122' & d$First_Yes_Year==2017 & d$First_Yes_DOY==85),]
#d<-d[!(d$Species=="alba" & d$First_Yes_DOY == 66 & d$Phenophase_Description=="Leaves"),]
d<-b[(b$Multiple_Observers>0),]
d<-d%>%
dplyr::select(Genus, Species, Individual_ID, Phenophase_Description, First_Yes_Year, First_Yes_DOY)
d<-d[!duplicated(d),]
df<-d%>%
group_by(Individual_ID, First_Yes_Year, Phenophase_Description)%>%
filter(row_number()==1)%>%
rename(year=First_Yes_Year)%>%
rename(doy=First_Yes_DOY)%>%
rename(pheno=Phenophase_Description)%>%
rename(id=Individual_ID)
df$gen<-substr(df$Genus, 1, 3)
df$sp<-substr(df$Species,1, 3)
df$species<-paste(df$gen, df$sp, sep="")
df$doy<-as.numeric(df$doy)
df$mean<-ave(df$doy, df$pheno, df$year, df$species)
#df$mean<-ifelse(df$pheno=="Leaves" & df$species=="Popdel" & df$year==2017, 110, df$mean)
df<-ungroup(df)
dx<-df%>%
dplyr::select(species, pheno, year, mean)
dx<-dx[!duplicated(dx),]
phases<-c("Breaking leaf buds", "Leaves", "Flowers or flower buds")
dx<-filter(dx, pheno%in%phases)
dx<-filter(dx, year>=2016)
dx$species<-ifelse(dx$species=="Acesac", "Acer saccharum", dx$species)
dx$species<-ifelse(dx$species=="Aesfla", "Aesculus flava", dx$species)
dx$species<-ifelse(dx$species=="Betall", "Betula alleghaniensis", dx$species)
dx$species<-ifelse(dx$species=="Betnig", "Betula nigra", dx$species)
dx$species<-ifelse(dx$species=="Cargla", "Carya glabra", dx$species)
dx$species<-ifelse(dx$species=="Carova", "Carya ovata", dx$species)
dx$species<-ifelse(dx$species=="Faggra", "Fagus grandifolia", dx$species)
dx$species<-ifelse(dx$species=="Popdel", "Populus deltoides", dx$species)
dx$species<-ifelse(dx$species=="Quealb", "Quercus alba", dx$species)
dx$species<-ifelse(dx$species=="Querub", "Quercus rubra", dx$species)
dx$species<-ifelse(dx$species=="Tilame", "Tilia americana", dx$species)
dvr<-dx
dvr$pheno<-ifelse(dvr$pheno=="Breaking leaf buds", "bb", dvr$pheno)
dvr$pheno<-ifelse(dvr$pheno=="Leaves", "lo", dvr$pheno)
dvr$pheno<-ifelse(dvr$pheno=="Flowers or flower buds", "flo", dvr$pheno)
dvr<-spread(dvr, pheno, mean)
dvr$lo<-as.numeric(dvr$lo)
dvr$bb<-as.numeric(dvr$bb)
dvr$risk<-dvr$lo-dvr$bb
dvr$hys<-ifelse(dvr$lo<=dvr$flo, "pro", "hys")
#ggplot(dx, aes(x=species, y=mean)) + geom_point(aes(color=pheno)) + facet_wrap(~species)
#fit1<-stan_glm(risk~bb+as.factor(year), data=dvr)
#fit1
cols <- colorRampPalette(brewer.pal(3,"Set1"))(3)
#dvr<-dvr[!(dvr$species=="Fagus grandifolia" & dvr$year==2018)]
dvr$code<-reorder(dvr$species, dvr$risk)
quartz()
frost<- ggplot(dvr, aes(x=code, y=risk)) + geom_point(aes(color=as.factor(year))) + ylab("Frost Risk") +
xlab("Species") + geom_line(aes(x=code, y=risk, color=as.factor(year), group=as.factor(year))) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.x=element_blank(),
axis.text.x = element_text(face = "italic", angle=45, hjust=1),
axis.text=element_text(size=10), legend.key = element_rect(fill = "transparent"),
legend.box.background = element_rect(), legend.position = c(0.15, 0.85)) + scale_color_manual(values=cols,
labels=c("2016","2017","2018"),
name="Year") + scale_y_continuous(limits=c(0, 30), expand=c(0,0))
dx.r<-filter(dx, pheno!="Flowers or flower buds")
xx<-subset(dx.r, pheno=="Breaking leaf buds")
xx$bb.yr<-ave(xx$mean, xx$year)
xx<-dplyr::select(xx, bb.yr, year)
xx<-xx[!duplicated(xx),]
dx.r<-inner_join(dx.r, xx)
####### Stop here Jun 19, 2018 - issues with mapping budburst date #########
dx.r$code<-reorder(dx.r$species, dx.r$mean)
dvr2<-ggplot(dx.r, aes(x=code, y=mean)) + geom_point(aes(color=pheno)) +
geom_line() + coord_flip() + ylab("Day of Year") + xlab("Species") +theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.text.y = element_text(face = "italic"),
axis.text=element_text(size=9), legend.key = element_rect(fill = "transparent"),
legend.box.background = element_rect(),
panel.spacing = unit(2, "lines"),
strip.background = element_rect(fill="transparent"),
strip.text = element_text(size=14)) + labs(col="Phenophase") +
facet_wrap(~year) + geom_hline(aes(yintercept=bb.yr), xx, col="forestgreen", linetype="dashed")
dx.h<-filter(dx, pheno!="Breaking leaf buds")
hys<-dplyr::select(dvr, species, year, hys)
dx.h<-inner_join(dx.h, hys)
dx.h<-dx.h[!(dx.h$species=="Fagus grandifolia" & dx.h$year==2018),]
colors<-colorRampPalette(brewer.pal(8,"Spectral"))(2)
ggplot(dx.h, aes(x=species, y=mean)) + geom_point(aes(col=hys)) + geom_line(aes(col=hys)) +
coord_flip() + ylab("Day of Year") + xlab("Species") +theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.text.y = element_text(face = "italic"),
axis.text=element_text(size=9), legend.key = element_rect(fill = "transparent"),
legend.box.background = element_rect(),
panel.spacing = unit(2, "lines"),
strip.background = element_rect(fill="transparent"),
strip.text = element_text(size=14)) + labs(col="Phenophase") +
facet_wrap(~year) + geom_hline(aes(yintercept=bb.yr), xx, col="forestgreen", linetype="dashed") + scale_color_manual(values=colors,
labels=c(hys="Hysteranthy",
pro="Proteranthy"),
name="")
df<-dplyr::select(b, ObservedBy_Person_ID, First_Yes_Year)
df[] <- lapply(df, gsub, pattern="'", replacement="")
df<-filter(df, First_Yes_Year==2016)
dsix<-df %>%
mutate(ObservedBy_Person_ID = strsplit(as.character(ObservedBy_Person_ID), ",")) %>%
unnest(ObservedBy_Person_ID)
dsix<-dsix[!duplicated(dsix),]
length(unique(dsix$ObservedBy_Person_ID))
# 62 = 2016
df<-dplyr::select(b, ObservedBy_Person_ID, First_Yes_Year)
df[] <- lapply(df, gsub, pattern="'", replacement="")
df<-filter(df, First_Yes_Year==2017)
dseven<-df %>%
mutate(ObservedBy_Person_ID = strsplit(as.character(ObservedBy_Person_ID), ",")) %>%
unnest(ObservedBy_Person_ID)
dseven<-dseven[!duplicated(dseven),]
length(unique(dseven$ObservedBy_Person_ID))
# 74 = 2017
df<-dplyr::select(b, ObservedBy_Person_ID, First_Yes_Year)
df[] <- lapply(df, gsub, pattern="'", replacement="")
df<-filter(df, First_Yes_Year==2018)
deight<-df %>%
mutate(ObservedBy_Person_ID = strsplit(as.character(ObservedBy_Person_ID), ",")) %>%
unnest(ObservedBy_Person_ID)
deight<-deight[!duplicated(deight),]
length(unique(deight$ObservedBy_Person_ID))
# 58 = 2016
obs<-full_join(dsix, dseven)
obs<-full_join(obs, deight)
obs<-obs[!duplicated(obs),]
tt<-as.data.frame(table(obs$First_Yes_Year, obs$ObservedBy_Person_ID))
tt$years<-ave(
tt$Freq, tt$Var2,
FUN=function(x) cumsum(c(1, head(x, -1)))
)
t18<-subset(tt, Var1==2018)
t18<-t18[(t18$Freq>0),]
table(t18$years)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(egg)
# Set Working Directory
setwd("~/Documents/git/treespotters/analysis/input")
b<-read.csv("individual_phenometrics_data.csv",header=TRUE)
### Cheap cleaning method to remove probable errors...
#d<-b[(b$First_Yes_DOY>=60),]
#d[] <- lapply(d, gsub, pattern="'", replacement="")
#d<-d[!(d$ObservedBy_Person_ID=='26122' & d$First_Yes_Year==2017 & d$First_Yes_DOY==85),]
#d<-d[!(d$Species=="alba" & d$First_Yes_DOY == 66 & d$Phenophase_Description=="Leaves"),]
d<-b[(b$Multiple_Observers>0),]
d<-d%>%
dplyr::select(Genus, Species, Individual_ID, Phenophase_Description, First_Yes_Year, First_Yes_DOY)
d<-d[!duplicated(d),]
df<-d%>%
group_by(Individual_ID, First_Yes_Year, Phenophase_Description)%>%
filter(row_number()==1)%>%
rename(year=First_Yes_Year)%>%
rename(doy=First_Yes_DOY)%>%
rename(pheno=Phenophase_Description)%>%
rename(id=Individual_ID)
df$gen<-substr(df$Genus, 1, 3)
df$sp<-substr(df$Species,1, 3)
df$species<-paste(df$gen, df$sp, sep="")
df$doy<-as.numeric(df$doy)
df$mean<-ave(df$doy, df$pheno, df$year, df$species)
#df$mean<-ifelse(df$pheno=="Leaves" & df$species=="Popdel" & df$year==2017, 110, df$mean)
df<-ungroup(df)
dx<-df%>%
dplyr::select(species, pheno, year, mean)
dx<-dx[!duplicated(dx),]
phases<-c("Breaking leaf buds", "Leaves", "Flowers or flower buds")
dx<-filter(dx, pheno%in%phases)
dx<-filter(dx, year>=2016)
dx$species<-ifelse(dx$species=="Acesac", "Acer saccharum", dx$species)
dx$species<-ifelse(dx$species=="Aesfla", "Aesculus flava", dx$species)
dx$species<-ifelse(dx$species=="Betall", "Betula alleghaniensis", dx$species)
dx$species<-ifelse(dx$species=="Betnig", "Betula nigra", dx$species)
dx$species<-ifelse(dx$species=="Cargla", "Carya glabra", dx$species)
dx$species<-ifelse(dx$species=="Carova", "Carya ovata", dx$species)
dx$species<-ifelse(dx$species=="Faggra", "Fagus grandifolia", dx$species)
dx$species<-ifelse(dx$species=="Popdel", "Populus deltoides", dx$species)
dx$species<-ifelse(dx$species=="Quealb", "Quercus alba", dx$species)
dx$species<-ifelse(dx$species=="Querub", "Quercus rubra", dx$species)
dx$species<-ifelse(dx$species=="Tilame", "Tilia americana", dx$species)
dvr<-dx
dvr$pheno<-ifelse(dvr$pheno=="Breaking leaf buds", "bb", dvr$pheno)
dvr$pheno<-ifelse(dvr$pheno=="Leaves", "lo", dvr$pheno)
dvr$pheno<-ifelse(dvr$pheno=="Flowers or flower buds", "flo", dvr$pheno)
dvr<-spread(dvr, pheno, mean)
dvr$lo<-as.numeric(dvr$lo)
dvr$bb<-as.numeric(dvr$bb)
dvr$risk<-dvr$lo-dvr$bb
dvr$hys<-ifelse(dvr$lo<=dvr$flo, "pro", "hys")
#ggplot(dx, aes(x=species, y=mean)) + geom_point(aes(color=pheno)) + facet_wrap(~species)
#fit1<-stan_glm(risk~bb+as.factor(year), data=dvr)
#fit1
cols <- colorRampPalette(brewer.pal(3,"Set1"))(3)
#dvr<-dvr[!(dvr$species=="Fagus grandifolia" & dvr$year==2018)]
dvr$code<-reorder(dvr$species, dvr$risk)
quartz()
frost<- ggplot(dvr, aes(x=code, y=risk)) + geom_point(aes(color=as.factor(year))) + ylab("Frost Risk") +
xlab("Species") + geom_line(aes(x=code, y=risk, color=as.factor(year), group=as.factor(year))) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"), axis.title.x=element_blank(),
axis.text.x = element_text(face = "italic", angle=45, hjust=1),
axis.text=element_text(size=10), legend.key = element_rect(fill = "transparent"),
legend.box.background = element_rect(), legend.position = c(0.15, 0.85)) + scale_color_manual(values=cols,
labels=c("2016","2017","2018"),
name="Year") + scale_y_continuous(limits=c(0, 30), expand=c(0,0))
dx.r<-filter(dx, pheno!="Flowers or flower buds")
xx<-subset(dx.r, pheno=="Breaking leaf buds")
xx$bb.yr<-ave(xx$mean, xx$year)
xx<-dplyr::select(xx, bb.yr, year)
xx<-xx[!duplicated(xx),]
dx.r<-inner_join(dx.r, xx)
####### Stop here Jun 19, 2018 - issues with mapping budburst date #########
dx.r$code<-reorder(dx.r$species, dx.r$mean)
dvr2<-ggplot(dx.r, aes(x=code, y=mean)) + geom_point(aes(color=pheno)) +
geom_line() + coord_flip() + ylab("Day of Year") + xlab("Species") +theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.text.y = element_text(face = "italic"),
axis.text=element_text(size=9), legend.key = element_rect(fill = "transparent"),
legend.box.background = element_rect(),
panel.spacing = unit(2, "lines"),
strip.background = element_rect(fill="transparent"),
strip.text = element_text(size=14)) + labs(col="Phenophase") +
facet_wrap(~year) + geom_hline(aes(yintercept=bb.yr), xx, col="forestgreen", linetype="dashed")
dx.h<-filter(dx, pheno!="Breaking leaf buds")
hys<-dplyr::select(dvr, species, year, hys)
dx.h<-inner_join(dx.h, hys)
dx.h<-dx.h[!(dx.h$species=="Fagus grandifolia" & dx.h$year==2018),]
colors<-colorRampPalette(brewer.pal(8,"Spectral"))(2)
ggplot(dx.h, aes(x=species, y=mean)) + geom_point(aes(col=hys)) + geom_line(aes(col=hys)) +
coord_flip() + ylab("Day of Year") + xlab("Species") +theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.text.y = element_text(face = "italic"),
axis.text=element_text(size=9), legend.key = element_rect(fill = "transparent"),
legend.box.background = element_rect(),
panel.spacing = unit(2, "lines"),
strip.background = element_rect(fill="transparent"),
strip.text = element_text(size=14)) + labs(col="Phenophase") +
facet_wrap(~year) + geom_hline(aes(yintercept=bb.yr), xx, col="forestgreen", linetype="dashed") + scale_color_manual(values=colors,
labels=c(hys="Hysteranthy",
pro="Proteranthy"),
name="")
df<-dplyr::select(b, ObservedBy_Person_ID, First_Yes_Year)
df[] <- lapply(df, gsub, pattern="'", replacement="")
df<-filter(df, First_Yes_Year==2016)
dsix<-df %>%
mutate(ObservedBy_Person_ID = strsplit(as.character(ObservedBy_Person_ID), ",")) %>%
unnest(ObservedBy_Person_ID)
dsix<-dsix[!duplicated(dsix),]
length(unique(dsix$ObservedBy_Person_ID))
# 62 = 2016
df<-dplyr::select(b, ObservedBy_Person_ID, First_Yes_Year)
df[] <- lapply(df, gsub, pattern="'", replacement="")
df<-filter(df, First_Yes_Year==2017)
dseven<-df %>%
mutate(ObservedBy_Person_ID = strsplit(as.character(ObservedBy_Person_ID), ",")) %>%
unnest(ObservedBy_Person_ID)
dseven<-dseven[!duplicated(dseven),]
length(unique(dseven$ObservedBy_Person_ID))
# 74 = 2017
df<-dplyr::select(b, ObservedBy_Person_ID, First_Yes_Year)
df[] <- lapply(df, gsub, pattern="'", replacement="")
df<-filter(df, First_Yes_Year==2018)
deight<-df %>%
mutate(ObservedBy_Person_ID = strsplit(as.character(ObservedBy_Person_ID), ",")) %>%
unnest(ObservedBy_Person_ID)
deight<-deight[!duplicated(deight),]
length(unique(deight$ObservedBy_Person_ID))
# 58 = 2016
obs<-full_join(dsix, dseven)
obs<-full_join(obs, deight)
obs<-obs[!duplicated(obs),]
tt<-as.data.frame(table(obs$First_Yes_Year, obs$ObservedBy_Person_ID))
tt$years<-ave(
tt$Freq, tt$Var2,
FUN=function(x) cumsum(c(1, head(x, -1)))
)
t18<-subset(tt, Var1==2018)
t18<-t18[(t18$Freq>0),]
table(t18$years)
View(obs)
View(tt)
View(t18)
